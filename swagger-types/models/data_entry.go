// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataEntry data entry
// swagger:model DataEntry
type DataEntry struct {

	// key
	// Required: true
	Key *string `json:"key"`

	// type
	// Required: true
	// Enum: [integer boolean binary string]
	Type *string `json:"type"`

	// integer/boolean/binary/string value
	// Required: true
	Value interface{} `json:"value"`
}

// Validate validates this data entry
func (m *DataEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataEntry) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

var dataEntryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["integer","boolean","binary","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataEntryTypeTypePropEnum = append(dataEntryTypeTypePropEnum, v)
	}
}

const (

	// DataEntryTypeInteger captures enum value "integer"
	DataEntryTypeInteger string = "integer"

	// DataEntryTypeBoolean captures enum value "boolean"
	DataEntryTypeBoolean string = "boolean"

	// DataEntryTypeBinary captures enum value "binary"
	DataEntryTypeBinary string = "binary"

	// DataEntryTypeString captures enum value "string"
	DataEntryTypeString string = "string"
)

// prop value enum
func (m *DataEntry) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataEntryTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataEntry) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DataEntry) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataEntry) UnmarshalBinary(b []byte) error {
	var res DataEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
