// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlockHeader block header
// swagger:model BlockHeader
type BlockHeader struct {

	// blocksize
	// Required: true
	Blocksize *int32 `json:"blocksize"`

	// desired reward
	DesiredReward int64 `json:"desiredReward,omitempty"`

	// features
	Features []int32 `json:"features"`

	// generator
	// Required: true
	Generator *string `json:"generator"`

	// height
	// Required: true
	Height *int32 `json:"height"`

	// nxt consensus
	// Required: true
	NxtConsensus *BlockHeaderNxtConsensus `json:"nxt-consensus"`

	// reference
	// Required: true
	Reference *string `json:"reference"`

	// reward
	Reward int64 `json:"reward,omitempty"`

	// signature
	// Required: true
	Signature *string `json:"signature"`

	// timestamp
	// Required: true
	Timestamp *int64 `json:"timestamp"`

	// total fee
	// Required: true
	TotalFee *int32 `json:"totalFee"`

	// transaction count
	// Required: true
	TransactionCount *int32 `json:"transactionCount"`

	// version
	// Required: true
	Version *int32 `json:"version"`
}

// Validate validates this block header
func (m *BlockHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlocksize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNxtConsensus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockHeader) validateBlocksize(formats strfmt.Registry) error {

	if err := validate.Required("blocksize", "body", m.Blocksize); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateGenerator(formats strfmt.Registry) error {

	if err := validate.Required("generator", "body", m.Generator); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateNxtConsensus(formats strfmt.Registry) error {

	if err := validate.Required("nxt-consensus", "body", m.NxtConsensus); err != nil {
		return err
	}

	if m.NxtConsensus != nil {
		if err := m.NxtConsensus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nxt-consensus")
			}
			return err
		}
	}

	return nil
}

func (m *BlockHeader) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateTotalFee(formats strfmt.Registry) error {

	if err := validate.Required("totalFee", "body", m.TotalFee); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateTransactionCount(formats strfmt.Registry) error {

	if err := validate.Required("transactionCount", "body", m.TransactionCount); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeader) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockHeader) UnmarshalBinary(b []byte) error {
	var res BlockHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BlockHeaderNxtConsensus block header nxt consensus
// swagger:model BlockHeaderNxtConsensus
type BlockHeaderNxtConsensus struct {

	// base target
	// Required: true
	BaseTarget *int64 `json:"base-target"`

	// generation signature
	// Required: true
	GenerationSignature *string `json:"generation-signature"`
}

// Validate validates this block header nxt consensus
func (m *BlockHeaderNxtConsensus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerationSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlockHeaderNxtConsensus) validateBaseTarget(formats strfmt.Registry) error {

	if err := validate.Required("nxt-consensus"+"."+"base-target", "body", m.BaseTarget); err != nil {
		return err
	}

	return nil
}

func (m *BlockHeaderNxtConsensus) validateGenerationSignature(formats strfmt.Registry) error {

	if err := validate.Required("nxt-consensus"+"."+"generation-signature", "body", m.GenerationSignature); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlockHeaderNxtConsensus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlockHeaderNxtConsensus) UnmarshalBinary(b []byte) error {
	var res BlockHeaderNxtConsensus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
