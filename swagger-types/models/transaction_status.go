// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionStatus transaction status
// swagger:model TransactionStatus
type TransactionStatus struct {

	// confirmations
	Confirmations int32 `json:"confirmations,omitempty"`

	// height
	Height int32 `json:"height,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// status
	// Required: true
	// Enum: [confirmed unconfirmed not_found]
	Status *string `json:"status"`
}

// Validate validates this transaction status
func (m *TransactionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionStatus) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var transactionStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["confirmed","unconfirmed","not_found"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionStatusTypeStatusPropEnum = append(transactionStatusTypeStatusPropEnum, v)
	}
}

const (

	// TransactionStatusStatusConfirmed captures enum value "confirmed"
	TransactionStatusStatusConfirmed string = "confirmed"

	// TransactionStatusStatusUnconfirmed captures enum value "unconfirmed"
	TransactionStatusStatusUnconfirmed string = "unconfirmed"

	// TransactionStatusStatusNotFound captures enum value "not_found"
	TransactionStatusStatusNotFound string = "not_found"
)

// prop value enum
func (m *TransactionStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, transactionStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TransactionStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionStatus) UnmarshalBinary(b []byte) error {
	var res TransactionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
