// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompiledScript compiled script
// swagger:model CompiledScript
type CompiledScript struct {

	// complexity
	// Required: true
	Complexity *int32 `json:"complexity"`

	// extra fee
	// Required: true
	ExtraFee *int64 `json:"extraFee"`

	// script
	// Required: true
	Script *string `json:"script"`
}

// Validate validates this compiled script
func (m *CompiledScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComplexity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtraFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScript(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompiledScript) validateComplexity(formats strfmt.Registry) error {

	if err := validate.Required("complexity", "body", m.Complexity); err != nil {
		return err
	}

	return nil
}

func (m *CompiledScript) validateExtraFee(formats strfmt.Registry) error {

	if err := validate.Required("extraFee", "body", m.ExtraFee); err != nil {
		return err
	}

	return nil
}

func (m *CompiledScript) validateScript(formats strfmt.Registry) error {

	if err := validate.Required("script", "body", m.Script); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompiledScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompiledScript) UnmarshalBinary(b []byte) error {
	var res CompiledScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
